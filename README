# Задание №1
- 1. Написать Dockerfile для nginx (собираем с нуля из базового образа ОС).Конфигурация nginx должна “приезжать” снаружи, логи должны сохраняться вне контейнера

- 2. Запустить 3 контейнера nginx с разными index-страницами (чтобы было понятно где какой). Все контейнеры должны работать одновременно.

- 3. Настроить балансировку для всех контейнеров, например по localhost:8888 (nginx, haproxy и т.д.)

- 4*. Автоматически выполнить пп.1-2 при помощи gitlab-CI, ansible или им подобных инструментов.

## Решение

Был разработан Dockerfile, который собирает на базе alpine обрза nginx. Также был разработан docker-compose для запуска нескольких контейнеров и пробрасывания директорий. После запуска контейнеров был установлен nginx на машину, чтобы поставить его как балансировщик перед контейнерами.

Результат можно увидеть тут
http://158.160.79.246

При обновлении страницы будет hellow из разных контейнров, что означает, что балансировка между контейнерами работает.

Что можно было улучшить:
Внедрить IAC, сейчас многое делается руками. Например, можно деплоить через ansible nginx (как в докере, так и nginx-балансировщик)

# Задание №2

1. Развернуть кластер kubernetes, выдерживающий отказ одного узла кластера,  любым из возможных способов. Доказать то, что он отказоустойчивый.

2. Развернуть Jenkins. Можно при помощи docker. С помощью jenkins создать контейнер с python/golang web приложением (Сложность уровня hello-world), развернуть приложение внутри кластера kubernetes. Исходный код приложения необходимо забирать из системы контроля версий. Можно использовать github.com. Самостоятельно  установленный инстанс gitlab будет плюсом. Gitlab можно так же развернуть при помощи docker. Обеспечить сохранение данных между перезапусками контейнеров, в случае использования docker.

3. Установить helm. Найти готовый пакет кластера postgres с репликацией и установить.

## Решение

1) Для развертывания кластера выбрано managed k8s решение для экономии времени и ресурсов. В таких кластерах "из коробки" идет отказоустойчивость (HA)

2) Для развертывания jenkins в k8s использовались 2 манифеста. Deployment и service.

http://158.160.77.47:30000 - тут можно увидеть welcome page от jenkins.

Для работы сборки докер образа были примонтированы docker.sock через манифест.
К сожалению, до деплоя в k8s не дошел, но это можно сделать через плагины/настройки в манифесте

...

3) Для развертывания postgres через helm использовался этот чарт 

https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha

Как результат 

![Alt text](image-2.png)

Можно увидеть, что постгрес работает (только не проходит аутентификация)

![Alt text](image-3.png)